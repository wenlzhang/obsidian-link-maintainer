{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["import { App, Plugin, Modal, TextComponent, Notice, DropdownComponent } from 'obsidian';\n\ninterface LinkMatch {\n    file: string;\n    lineContent: string;\n    lineNumber: number;\n    linkText: string;\n}\n\nenum LinkType {\n    NOTE = 'note',\n    BLOCK = 'block',\n    HEADING = 'heading'\n}\n\nclass SearchModal extends Modal {\n    oldFileName: string;\n    newFileName: string;\n    blockId: string;\n    headingText: string;\n    linkType: LinkType;\n    onSubmit: (oldFileName: string, newFileName: string, reference: string | null, linkType: LinkType) => void;\n\n    constructor(app: App, onSubmit: (oldFileName: string, newFileName: string, reference: string | null, linkType: LinkType) => void) {\n        super(app);\n        this.onSubmit = onSubmit;\n        this.linkType = LinkType.NOTE;\n    }\n\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.addClass('link-maintainer-modal');\n        contentEl.createEl(\"h2\", { text: \"Update Link References\" });\n\n        // Link type selector\n        const dropdownContainer = contentEl.createDiv({ cls: 'dropdown' });\n        dropdownContainer.createEl(\"label\", { text: \"Link Type:\" });\n        const linkTypeDropdown = new DropdownComponent(dropdownContainer)\n            .addOption(LinkType.NOTE, \"Note Link ([[filename]])\")\n            .addOption(LinkType.BLOCK, \"Block Link ([[filename#^blockid]])\")\n            .addOption(LinkType.HEADING, \"Heading Link ([[filename#Heading]])\")\n            .onChange(value => {\n                this.linkType = value as LinkType;\n                // Show/hide reference inputs based on link type\n                if (this.blockIdInput && this.headingInput) {\n                    this.blockIdInput.inputEl.parentElement.style.display = \n                        value === LinkType.BLOCK ? 'block' : 'none';\n                    this.headingInput.inputEl.parentElement.style.display = \n                        value === LinkType.HEADING ? 'block' : 'none';\n                }\n            });\n\n        // Old file name input\n        const oldFileContainer = contentEl.createDiv({ cls: 'setting-item' });\n        oldFileContainer.createEl(\"label\", { text: \"Old File Name:\" });\n        const oldFileInput = new TextComponent(oldFileContainer)\n            .setPlaceholder(\"Enter old file name (e.g., fooA)\")\n            .onChange(value => this.oldFileName = value);\n        \n        // New file name input\n        const newFileContainer = contentEl.createDiv({ cls: 'setting-item' });\n        newFileContainer.createEl(\"label\", { text: \"New File Name:\" });\n        const newFileInput = new TextComponent(newFileContainer)\n            .setPlaceholder(\"Enter new file name (e.g., fooB)\")\n            .onChange(value => this.newFileName = value);\n\n        // Block ID input (only shown for block links)\n        const blockContainer = contentEl.createDiv({ cls: 'setting-item' });\n        blockContainer.createEl(\"label\", { text: \"Block ID:\" });\n        this.blockIdInput = new TextComponent(blockContainer)\n            .setPlaceholder(\"Enter block ID (e.g., bar1234)\")\n            .onChange(value => this.blockId = value);\n        blockContainer.style.display = 'none';\n\n        // Heading input (only shown for heading links)\n        const headingContainer = contentEl.createDiv({ cls: 'setting-item' });\n        headingContainer.createEl(\"label\", { text: \"Heading:\" });\n        this.headingInput = new TextComponent(headingContainer)\n            .setPlaceholder(\"Enter heading text (e.g., Introduction)\")\n            .onChange(value => this.headingText = value);\n        headingContainer.style.display = 'none';\n\n        // Search button\n        const buttonContainer = contentEl.createDiv({ cls: 'setting-item' });\n        const searchButton = buttonContainer.createEl(\"button\", { text: \"Search\" });\n        searchButton.addEventListener(\"click\", () => {\n            if (!this.oldFileName || !this.newFileName) {\n                new Notice(\"Please enter both file names\");\n                return;\n            }\n\n            let reference: string | null = null;\n            switch (this.linkType) {\n                case LinkType.BLOCK:\n                    if (!this.blockId) {\n                        new Notice(\"Please enter a block ID\");\n                        return;\n                    }\n                    reference = this.blockId;\n                    break;\n                case LinkType.HEADING:\n                    if (!this.headingText) {\n                        new Notice(\"Please enter a heading\");\n                        return;\n                    }\n                    reference = this.headingText;\n                    break;\n            }\n\n            this.onSubmit(this.oldFileName, this.newFileName, reference, this.linkType);\n            this.close();\n        });\n    }\n\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n\nclass ResultsModal extends Modal {\n    matches: LinkMatch[];\n    newFileName: string;\n    reference: string | null;\n    linkType: LinkType;\n    onConfirm: (matches: LinkMatch[], newFileName: string, reference: string | null) => void;\n\n    constructor(\n        app: App, \n        matches: LinkMatch[], \n        newFileName: string,\n        reference: string | null,\n        linkType: LinkType,\n        onConfirm: (matches: LinkMatch[], newFileName: string, reference: string | null) => void\n    ) {\n        super(app);\n        this.matches = matches;\n        this.newFileName = newFileName;\n        this.reference = reference;\n        this.linkType = linkType;\n        this.onConfirm = onConfirm;\n    }\n\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl(\"h2\", { text: \"Found Links\" });\n\n        if (this.matches.length === 0) {\n            contentEl.createEl(\"p\", { text: \"No matches found.\" });\n            return;\n        }\n\n        // Display matches\n        const matchList = contentEl.createEl(\"div\");\n        this.matches.forEach(match => {\n            const matchEl = matchList.createEl(\"div\", { cls: \"link-match\" });\n            let newLink: string;\n            \n            switch (this.linkType) {\n                case LinkType.BLOCK:\n                    newLink = `[[${this.newFileName}#^${this.reference}]]`;\n                    break;\n                case LinkType.HEADING:\n                    newLink = `[[${this.newFileName}#${this.reference}]]`;\n                    break;\n                default:\n                    newLink = `[[${this.newFileName}]]`;\n            }\n            \n            matchEl.createEl(\"p\", { \n                text: `File: ${match.file}\\nLine ${match.lineNumber}: ${match.lineContent}\\nWill be replaced with: ${newLink}` \n            });\n        });\n\n        contentEl.createEl(\"br\");\n\n        // Confirm button\n        const confirmButton = contentEl.createEl(\"button\", { text: \"Confirm Replacement\" });\n        confirmButton.addEventListener(\"click\", () => {\n            this.onConfirm(this.matches, this.newFileName, this.reference);\n            this.close();\n        });\n    }\n\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n\nexport default class LinkMaintainer extends Plugin {\n    async onload() {\n        this.addCommand({\n            id: 'link-maintainer-update-references',\n            name: 'Update Link References',\n            callback: () => this.showSearchModal(),\n        });\n    }\n\n    showSearchModal() {\n        new SearchModal(\n            this.app, \n            (oldFileName: string, newFileName: string, reference: string | null, linkType: LinkType) => {\n                this.searchLinks(oldFileName, newFileName, reference, linkType);\n            }\n        ).open();\n    }\n\n    async searchLinks(oldFileName: string, newFileName: string, reference: string | null, linkType: LinkType) {\n        const matches: LinkMatch[] = [];\n        const files = this.app.vault.getMarkdownFiles();\n\n        // Escape special regex characters in the file name but keep spaces\n        const escapedOldFileName = oldFileName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n        for (const file of files) {\n            const content = await this.app.vault.read(file);\n            const lines = content.split('\\n');\n            \n            lines.forEach((line, index) => {\n                let pattern: string;\n                switch (linkType) {\n                    case LinkType.BLOCK:\n                        // Search for block links in the format [[oldFileName#^blockId]]\n                        pattern = `\\\\[\\\\[${escapedOldFileName}#\\\\^${reference}\\\\]\\\\]`;\n                        break;\n                    case LinkType.HEADING:\n                        // Search for heading links in the format [[oldFileName#Heading]]\n                        pattern = `\\\\[\\\\[${escapedOldFileName}#${reference}\\\\]\\\\]`;\n                        break;\n                    default:\n                        // Search for note links in the format [[oldFileName]]\n                        pattern = `\\\\[\\\\[${escapedOldFileName}\\\\]\\\\]`;\n                }\n\n                const match = line.match(new RegExp(pattern));\n                if (match) {\n                    matches.push({\n                        file: file.path,\n                        lineContent: line,\n                        lineNumber: index + 1,\n                        linkText: match[0]\n                    });\n                }\n            });\n        }\n\n        // Show results modal\n        new ResultsModal(\n            this.app, \n            matches, \n            newFileName,\n            reference,\n            linkType,\n            (matches, newFileName, reference) => {\n                this.replaceLinks(matches, newFileName, reference, linkType);\n            }\n        ).open();\n    }\n\n    async replaceLinks(matches: LinkMatch[], newFileName: string, reference: string | null, linkType: LinkType) {\n        for (const match of matches) {\n            const file = this.app.vault.getAbstractFileByPath(match.file);\n            if (!file || !(file instanceof this.app.vault.adapter.constructor)) continue;\n\n            const content = await this.app.vault.read(file as any);\n            let newLink: string;\n\n            // Use the exact match text as the pattern to ensure correct replacement\n            const oldPattern = match.linkText.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n            switch (linkType) {\n                case LinkType.BLOCK:\n                    newLink = `[[${newFileName}#^${reference}]]`;\n                    break;\n                case LinkType.HEADING:\n                    newLink = `[[${newFileName}#${reference}]]`;\n                    break;\n                default:\n                    newLink = `[[${newFileName}]]`;\n            }\n\n            console.log(`Replacing in file: ${match.file}`);\n            console.log(`Old Pattern: ${oldPattern}`);\n            console.log(`New Link: ${newLink}`);\n\n            const newContent = content.replace(\n                new RegExp(oldPattern, 'g'),\n                newLink\n            );\n\n            if (content !== newContent) {\n                await this.app.vault.modify(file as any, newContent);\n                console.log(`Replaced content in file: ${match.file}`);\n            } else {\n                console.log(`No replacement needed for file: ${match.file}`);\n            }\n        }\n\n        new Notice(`Updated ${matches.length} link(s)`);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
