import esbuild from 'esbuild';
import builtins from 'builtin-modules';
import { copyFileSync, mkdirSync, existsSync } from 'fs';
import { join, dirname } from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const buildDir = 'build';

// Create build directory if it doesn't exist
if (!existsSync(buildDir)) {
    mkdirSync(buildDir);
}

// Function to copy files to build directory
const copyToBuild = () => {
    copyFileSync('manifest.json', join(buildDir, 'manifest.json'));
    if (existsSync('styles.css')) {
        copyFileSync('styles.css', join(buildDir, 'styles.css'));
    }
};

// Initial copy
copyToBuild();

const ctx = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ['./src/main.ts'],
    bundle: true,
    external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/lr',
        ...builtins
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: 'info',
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: join(buildDir, 'main.js'),
});

if (prod) {
    await ctx.rebuild();
    ctx.dispose();
} else {
    await ctx.watch();
    console.log('ðŸ‘€ watching for changes...');
}
